chisq_result
image_table
image_type_totals
image_type_totals
image_data_for_chisq
image_table
# Create a contingency table for Chi-square test
image_table <- table(image_data_for_chisq$ImageType, image_data_for_chisq$Group)
image_table
# 1. Sum image types per group
image_type_totals <- combined_images %>%
group_by(Group) %>%
summarise(across("Drawing":"Qr code", ~ sum(.x, na.rm = TRUE)))  # Sum image types for each group
# 3. Calculate total number of images per group
image_type_totals <- image_type_totals %>%
rowwise() %>%
mutate(total_images = sum(c_across("Drawing":"Qr code"))) %>%
ungroup()
# Reshape the data into a wide format where rows are ImageType and columns are Groups (China and West)
image_data_for_chisq <- image_type_totals %>%
select(Group, "Drawing":"Qr code") %>%
pivot_wider(names_from = Group, values_from = "Drawing":"Qr code")  # Reshape to wide format
# Create the contingency table for Chi-square test
image_table <- as.table(image_data_for_chisq[, -1])  # Exclude the 'Group' column and convert to table
# Reshape the data into a wide format where rows are ImageType and columns are Groups (China and West)
image_data_for_chisq
West_image_type<- west_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
West_image_type<- west_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
West_image_type<- West_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type<- china_data %>% select(image_cols) %>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
West_image_type<- West_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type<- China_data %>% select(image_cols) %>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
west
West_image_type<- West_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type<- China_data %>% select(image_cols) %>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
image_type<- data.matrix(rbind(West=West_image_type, China=China_image_type))
image_type_prop<- round(prop.table(image_type, 1),2)
image_type
image_type_prop
West_image_type<- West_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type<- China_data %>% select(image_cols) %>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
image_type<- data.matrix(rbind(West=West_image_type, China=China_image_type))
image_type_prop<- round(prop.table(image_type, 1),2)
CrossTable(image_type, chisq=T, expected=T, asresid=T, format="SPSS")
knitr::opts_chunk$set(echo = TRUE)
# Install renv if not already installed
if (!requireNamespace("renv", quietly = TRUE)) {
install.packages("renv")
}
# Initialize renv in the project (creates env/renv/ and renv.lock)
renv::init(bare = TRUE)
# Install required packages
renv::install(c(
"tidyverse",    # data manipulation and ggplot2
"broom",        # tidy statistical test outputs
"reshape2",     # for data reshaping
"gmodels",      # for cross-tabulations and statistics
"lsr",           # useful stats helpers
"RColorBrewer",   # color palettes for visualization
"readr"          # reading CSV and delimited files
))
knitr::opts_chunk$set(echo = TRUE)
# Install renv if not already installed
if (!requireNamespace("renv", quietly = TRUE)) {
install.packages("renv")
}
# Initialize renv in the project (creates env/renv/ and renv.lock)
renv::init(bare = TRUE)
# Install required packages
renv::install(c(
"tidyverse",    # data manipulation and ggplot2
"broom",        # tidy statistical test outputs
"reshape2",     # for data reshaping
"gmodels",      # for cross-tabulations and statistics
"lsr",           # useful stats helpers
"RColorBrewer",   # color palettes for visualization
"readr"          # reading CSV and delimited files
))
# Load required libraries
library(tidyverse)
library(broom)
library(reshape2)
library(gmodels)
library(lsr)
library(readr)
West_data<- read_csv("data/2.2.4.1 West image type.csv")
West_data<- read_csv("data/2.2.4.1 West image type.csv")
China_data<- read_csv("../data/2.2.4.2 Chinese image type.csv")
West_data<- read_csv("../data/2.2.4.1 West image type.csv")
West_data<- read_csv("../data/2.2.4.1 West image type.csv")
head(West_data)
China_data<- read_csv("../data/2.2.4.2 Chinese image type.csv")
head(China_data)
# Define image type columns
image_cols <- c("Drawing", "Icon", "Logo", "None of above", "Photo", "Poster", "Qr code")
# Select and tag China data
china_images <- China_data %>%
select(all_of(image_cols)) %>%
mutate(Group = "China")
# Select and tag Western data
west_images <- West_data %>%
select(all_of(image_cols)) %>%
mutate(Group = "West")
# Combine the two datasets
combined_images <- bind_rows(china_images, west_images)
# Preview combined data
head(combined_images)
# Sum image types per group
image_type_totals <- combined_images %>%
group_by(Group) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)))
# Calculate total number of images per group
image_type_totals <- image_type_totals %>%
rowwise() %>%
mutate(total_images = sum(c_across(-Group))) %>%
ungroup()
# Convert image counts to proportions within each group
image_type_prop <- image_type_totals %>%
mutate(across(-c(Group, total_images), ~ round(.x / total_images * 100, 2)))
# Reshape for plotting
image_type_prop_long <- image_type_prop %>%
select(-total_images) %>%
pivot_longer(-Group, names_to = "ImageType", values_to = "Percentage")
# Flip the order of 'Group' (make 'West' appear first and 'China' second)
image_type_prop_long$Group <- factor(image_type_prop_long$Group, levels = c("West", "China"))
# Create the plot object first
plot <- ggplot(data = image_type_prop_long, aes(x = Group, y = Percentage, fill = ImageType)) +
geom_bar(stat = "identity", position = "stack", color = "black", width = 0.7, size = 0.25) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
labs(
x = "Group",
y = "Percentage of Total Images",
fill = "Image Type",
title = "Relative Frequency of Image Types by Group"
)
# Print the plot to view it
print(plot)
# Save the plot to the outputs/figures folder
ggsave(
filename = "../outputs/figures/percentage_image_type.png",
plot = plot,      # specify the plot object
dpi = 300,
width = 8,
height = 6
)
West_image_type<- West_data %>% select(image_cols)%>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type<- China_data %>% select(image_cols) %>% summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
image_type<- data.matrix(rbind(West=West_image_type, China=China_image_type))
image_type_prop<- round(prop.table(image_type, 1),2)
CrossTable(image_type, chisq=T, expected=T, asresid=T, format="SPSS")
# Reshape the data into a wide format where rows are ImageType and columns are Groups (China and West)
image_data_for_chisq <- image_type_totals %>%
select(Group, Drawing:Qr_code) %>%
pivot_wider(names_from = Group, values_from = Drawing:Qr_code)  # Reshape to wide format
# Summarize the image types for each group (West and China)
West_image_type <- West_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
# Combine the West and China image type data into a matrix for Chi-square test
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
# Calculate the proportions for each image type within each group
image_type_prop <- round(prop.table(image_type, 1), 2)
# Perform Chi-square test using the image_type matrix
chisq_result <- chisq.test(image_type)
# Print the Chi-square test result
print(chisq_result)
# Print the Chi-square test result
print(chisq_result)
# Calculate Cramér's V for the Chi-square test
cramersV_value <- assocstats(image_type)$cramer
# Calculate Cramér's V for the Chi-square test
cramersV_value <- cramersV(image_type)
# Print the Cramér's V value
print(paste("Cramér's V value: ", cramersV_value))
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
# Create a summary table with Chi-square statistic and Cramér's V
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
# Print the chi_square_summary table
print(chi_square_summary)
# Get CrossTable result into a data frame for later use
cross_table_df <- as.data.frame(cross_table_result$t)
View(cross_table_df)
cross_table_result
cross_table_result
# Summarize the image types for each group (West and China)
West_image_type <- West_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
# Combine the West and China image type data into a matrix for Chi-square test
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
# Calculate the proportions for each image type within each group
image_type_prop <- round(prop.table(image_type, 1), 2)
# Perform Chi-square test using the image_type matrix
chisq_result <- chisq.test(image_type)
# Print the Chi-square test result
print(chisq_result)
# Calculate Cramér's V for the Chi-square test
cramersV_value <- cramersV(image_type)
# Print the Cramér's V value
print(paste("Cramér's V value: ", cramersV_value))
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
# Get CrossTable result into a data frame for later use
cross_table_df <- as.data.frame(cross_table_result$t)
cross_table_df
# Create a summary table with Chi-square statistic and Cramér's V
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
# Print the chi_square_summary table
print(chi_square_summary)
# Save the Chi-square summary table to a CSV file
write.csv(chi_square_summary, file = "outputs/chi_square_summary.csv", row.names = FALSE)
# Save the Chi-square summary table to a CSV file
write.csv(chi_square_summary, file = "../outputs//tables/chi_square_summary.csv", row.names = FALSE)
# Save the CrossTable result (detailed contingency table) to a text file
writeLines(cross_table_result$tab, "../outputs/tables/crosstable_result.txt")
# Save the Chi-square summary table to a CSV file
write.csv(chi_square_summary, file = "../outputs/tables/chi_square_summary.csv", row.names = FALSE)
# Save the CrossTable result (detailed contingency table) to a text file
writeLines(cross_table_result$tab, "../outputs/tables/crosstable_result.txt")
# Summarize the image types for each group (West and China)
West_image_type <- West_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
# Combine the West and China image type data into a matrix for Chi-square test
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
# Calculate the proportions for each image type within each group
image_type_prop <- round(prop.table(image_type, 1), 2)
# Perform Chi-square test using the image_type matrix
chisq_result <- chisq.test(image_type)
# Print the Chi-square test result
print(chisq_result)
# Calculate Cramér's V for the Chi-square test
cramersV_value <- cramersV(image_type)
# Print the Cramér's V value
print(paste("Cramér's V value: ", cramersV_value))
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
# Create a summary table with Chi-square statistic and Cramér's V
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
# Print the chi_square_summary table
print(chi_square_summary)
# Save the Chi-square summary table to a CSV file
write.csv(chi_square_summary, file = "../outputs/tables/chi_square_summary.csv", row.names = FALSE)
# Check if the directory exists, and create it if it doesn't
dir.create("../outputs/tables", recursive = TRUE)
# Save the Chi-square summary table to a CSV file
write.csv(chi_square_summary, file = "../outputs/tables/chi_square_summary.csv", row.names = FALSE)
# Save the CrossTable result (detailed contingency table) to a text file
writeLines(cross_table_result$tab, "../outputs/tables/crosstable_result.txt")
# Convert the CrossTable result to a character vector
cross_table_output <- capture.output(cross_table_result)
# Check the first few lines to confirm it's correctly formatted
head(cross_table_output)
# Now save it to the file
writeLines(cross_table_output, "../outputs/tables/crosstable_result.txt")
cross_table_output
# Save the CrossTable result to a text file
writeLines(cross_table_result, "../outputs/tables/crosstable_result.txt")
# Ensure the captured output is a character vector
cross_table_result <- as.character(cross_table_result)
# Save the CrossTable result to a text file
writeLines(cross_table_result, "../outputs/tables/crosstable_result.txt")
cross_table_result
# Summarize the image types for each group (West and China)
West_image_type <- West_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
# Combine the West and China image type data into a matrix for Chi-square test
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
# Calculate the proportions for each image type within each group
image_type_prop <- round(prop.table(image_type, 1), 2)
# Perform Chi-square test using the image_type matrix
chisq_result <- chisq.test(image_type)
# Print the Chi-square test result
print(chisq_result)
# Calculate Cramér's V for the Chi-square test
cramersV_value <- cramersV(image_type)
# Print the Cramér's V value
print(paste("Cramér's V value: ", cramersV_value))
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
# Create a summary table with Chi-square statistic and Cramér's V
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
# Print the chi_square_summary table
print(chi_square_summary)
# Check if the directory exists, and create it if it doesn't
dir.create("../outputs/tables", recursive = TRUE)
# Ensure the captured output is a character vector
cross_table_result <- as.character(cross_table_result)
# Save the CrossTable result to a text file
writeLines(cross_table_result, "../outputs/tables/crosstable_result.txt")
cross_table_result
# Summarize the image types for each group (West and China)
West_image_type <- West_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>%
select(image_cols) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)))
# Combine the West and China image type data into a matrix for Chi-square test
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
# Calculate the proportions for each image type within each group
image_type_prop <- round(prop.table(image_type, 1), 2)
# Perform Chi-square test using the image_type matrix
chisq_result <- chisq.test(image_type)
# Print the Chi-square test result
print(chisq_result)
# Calculate Cramér's V for the Chi-square test
cramersV_value <- cramersV(image_type)
# Print the Cramér's V value
print(paste("Cramér's V value: ", cramersV_value))
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
cross_table_result
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
# Output the CrossTable with Chi-square test, expected counts, residuals, and format as SPSS
cross_table_result <- capture.output(
CrossTable(image_type,
chisq = TRUE,       # Perform Chi-square test
expected = TRUE,    # Show expected counts
asresid = TRUE,     # Show residuals (difference between observed and expected counts)
format = "SPSS")    # Output format similar to SPSS (can be changed to "R" for R-style output)
)
# Create a summary table with Chi-square statistic and Cramér's V
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
# Print the chi_square_summary table
print(chi_square_summary)
# Check if the directory exists, and create it if it doesn't
dir.create("../outputs/tables", recursive = TRUE)
# Ensure the captured output is a character vector
cross_table_result <- as.character(cross_table_result)
# Save the CrossTable result to a text file
writeLines(cross_table_result, "../outputs/tables/crosstable_result.txt")
# Install renv if not already installed
if (!requireNamespace("renv", quietly = TRUE)) {
install.packages("renv")
}
# Initialize renv in the project (creates env/renv/ and renv.lock)
renv::init(bare = TRUE)
# Install required packages
renv::install(c(
"tidyverse",    # data manipulation and ggplot2
"broom",        # tidy statistical test outputs
"reshape2",     # for data reshaping
"gmodels",      # for cross-tabulations and statistics
"lsr",           # useful stats helpers
"RColorBrewer",   # color palettes for visualization
"readr"          # reading CSV and delimited files
))
# Load required libraries
library(tidyverse)
library(broom)
library(reshape2)
library(gmodels)
library(lsr)
library(readr)
West_data<- read_csv("../data/2.2.4.1 West image type.csv")
head(West_data)
China_data<- read_csv("../data/2.2.4.2 Chinese image type.csv")
head(China_data)
West_data<- read_csv("../data/2.2.4.1 West image type.csv")
head(West_data)
China_data<- read_csv("../data/2.2.4.2 Chinese image type.csv")
head(China_data)
# Define image type columns
image_cols <- c("Drawing", "Icon", "Logo", "None of above", "Photo", "Poster", "Qr code")
# Select and tag China data
china_images <- China_data %>%
select(all_of(image_cols)) %>%
mutate(Group = "China")
# Select and tag Western data
west_images <- West_data %>%
select(all_of(image_cols)) %>%
mutate(Group = "West")
# Combine the two datasets
combined_images <- bind_rows(china_images, west_images)
# Preview combined data
head(combined_images)
# Sum image types per group
image_type_totals <- combined_images %>%
group_by(Group) %>%
summarise(across(everything(), ~ sum(.x, na.rm = TRUE)))
# Calculate total number of images per group
image_type_totals <- image_type_totals %>%
rowwise() %>%
mutate(total_images = sum(c_across(-Group))) %>%
ungroup()
# Convert image counts to proportions within each group
image_type_prop <- image_type_totals %>%
mutate(across(-c(Group, total_images), ~ round(.x / total_images * 100, 2)))
# Reshape for plotting
image_type_prop_long <- image_type_prop %>%
select(-total_images) %>%
pivot_longer(-Group, names_to = "ImageType", values_to = "Percentage")
# Flip the order of 'Group' (make 'West' appear first and 'China' second)
image_type_prop_long$Group <- factor(image_type_prop_long$Group, levels = c("West", "China"))
# Create the plot object first
plot <- ggplot(data = image_type_prop_long, aes(x = Group, y = Percentage, fill = ImageType)) +
geom_bar(stat = "identity", position = "stack", color = "black", width = 0.7, size = 0.25) +
scale_fill_brewer(palette = "Set1") +
theme_classic() +
labs(
x = "Group",
y = "Percentage of Total Images",
fill = "Image Type",
title = "Relative Frequency of Image Types by Group"
)
# Print the plot to view it
print(plot)
# Save the plot to the outputs/figures folder
ggsave(
filename = "../outputs/figures/percentage_image_type.png",
plot = plot,      # specify the plot object
dpi = 300,
width = 8,
height = 6
)
# Summarize image counts per group
West_image_type <- West_data %>% select(image_cols) %>% summarise(across(everything(), ~ sum(.x, na.rm = TRUE)))
China_image_type <- China_data %>% select(image_cols) %>% summarise(across(everything(), ~ sum(.x, na.rm = TRUE)))
image_type <- data.matrix(rbind(West = West_image_type, China = China_image_type))
image_type_prop <- round(prop.table(image_type, 1), 2)
# Chi-square test
chisq_result <- chisq.test(image_type)
print(chisq_result)
# Cramér's V (effect size)
cramersV_value <- cramersV(image_type)
print(paste("Cramér's V value:", round(cramersV_value, 3)))
# Save CrossTable to text
cross_table_result <- capture.output(
CrossTable(image_type,
chisq = TRUE,
expected = TRUE,
asresid = TRUE,
format = "SPSS")
)
# Save statistical summaries
chi_square_summary <- tibble(
Chi_Square_Statistic = chisq_result$statistic,
Degrees_of_Freedom = chisq_result$parameter,
P_Value = chisq_result$p.value,
Cramers_V = cramersV_value
)
print(chi_square_summary)
# Ensure output folder exists and save files
dir.create("../outputs/tables", recursive = TRUE, showWarnings = FALSE)
write.csv(chi_square_summary, file = "../outputs/tables/chi_square_summary.csv", row.names = FALSE)
writeLines(cross_table_result, "../outputs/tables/crosstable_result.txt")
